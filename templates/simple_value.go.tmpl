{{ template "header" . -}}
package supertypes

import (
	"context"
    {{- if eq .TypeName "Number" }}
	"math/big"
    {{ end }}
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure the implementation satisfies the expected interfaces.
var _ basetypes.{{ .TypeName }}Valuable = {{ .TypeName }}Value{}

type {{ .TypeName }}Value struct {
	basetypes.{{ .TypeName }}Value
}

func (v {{ .TypeName }}Value) Equal(o attr.Value) bool {
	other, ok := o.({{ .TypeName }}Value)

	if !ok {
		return false
	}

	return v.{{ .TypeName }}Value.Equal(other.{{ .TypeName }}Value)
}

func (v {{ .TypeName }}Value) Type(ctx context.Context) attr.Type {
	return {{ .TypeName }}Type{
		{{ .TypeName }}Type: v.{{ .TypeName }}Value.Type(ctx).(basetypes.{{ .TypeName }}Type),
	}
}

func New{{ .TypeName }}Null() {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Null(),
	}
}

func New{{ .TypeName }}Unknown() {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Unknown(),
	}
}

func New{{ .TypeName }}Value(s {{ golangType .TypeName }}) {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Value(s),
	}
}

{{ if ne .TypeName "Number" }}
func New{{ .TypeName }}PointerValue(s *{{ golangType .TypeName }}) {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}PointerValue(s),
	}
}
{{ end }}

// * CustomFunc

func (v *{{ .TypeName }}Value) Get() {{ golangType .TypeName }} {
	return v.{{ .TypeName }}Value.Value{{  if eq .TypeName "Number"}}BigFloat{{else}}{{ .TypeName }}{{end}}()
}

{{ if ne .TypeName "Number" }}
func (v *{{ .TypeName }}Value) GetPtr() *{{ golangType .TypeName }} {
	return v.{{ .TypeName }}Value.Value{{ .TypeName }}Pointer()
}
{{ end }}

func (v *{{ .TypeName }}Value) Set(s {{ golangType .TypeName }}) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Value(s)
}

func (v *{{ .TypeName }}Value) SetNull() {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Null()
}

func (v *{{ .TypeName }}Value) SetUnknown() {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Unknown()
}

func (v {{ .TypeName }}Value) IsKnown() bool {
	return !v.{{ .TypeName }}Value.IsNull() && !v.{{ .TypeName }}Value.IsUnknown()
}
