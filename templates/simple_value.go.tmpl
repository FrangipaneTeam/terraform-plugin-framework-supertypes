{{ template "header" . -}}
package supertypes

import (
	"context"
    {{- if eq .TypeName "Number" }}
	"math/big"
    {{ end }}
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure the implementation satisfies the expected interfaces.
var _ basetypes.{{ .TypeName }}Valuable = {{ .TypeName }}Value{}

type {{ .TypeName }}Value struct {
	basetypes.{{ .TypeName }}Value
}

func (v {{ .TypeName }}Value) Equal(o attr.Value) bool {
	other, ok := o.({{ .TypeName }}Value)

	if !ok {
		return false
	}

	return v.{{ .TypeName }}Value.Equal(other.{{ .TypeName }}Value)
}

func (v {{ .TypeName }}Value) Type(ctx context.Context) attr.Type {
	return {{ .TypeName }}Type{
		{{ .TypeName }}Type: v.{{ .TypeName }}Value.Type(ctx).(basetypes.{{ .TypeName }}Type),
	}
}

func New{{ .TypeName }}Null() {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Null(),
	}
}

func New{{ .TypeName }}Unknown() {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Unknown(),
	}
}

func New{{ .TypeName }}Value(s {{ golangType .TypeName }}) {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Value(s),
	}
}

{{ if ne .TypeName "Number" }}
func New{{ .TypeName }}PointerValue(s *{{ golangType .TypeName }}) {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}PointerValue(s),
	}
}
{{ end }}

// * CustomFunc

func (v *{{ .TypeName }}Value) Get() {{ golangType .TypeName }} {
	return v.{{ .TypeName }}Value.Value{{  if eq .TypeName "Number"}}BigFloat{{else}}{{ .TypeName }}{{end}}()
}

{{ if ne .TypeName "Number" }}
func (v *{{ .TypeName }}Value) GetPtr() *{{ golangType .TypeName }} {
	return v.{{ .TypeName }}Value.Value{{ .TypeName }}Pointer()
}
{{ end }}

func (v *{{ .TypeName }}Value) Set(s {{ golangType .TypeName }}) {
	{{ if eq .TypeName "String" }}
	if s == "" {
		v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Null()
		return
	}
	{{ end }}
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Value(s)
}

func (v *{{ .TypeName }}Value) SetPtr(s *{{ golangType .TypeName }}) {
	if s == nil {
		v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Null()
		return
	}
	
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}PointerValue(s)
}

{{ if eq .TypeName "Int64" }}
func (v {{ .TypeName }}Value) SetInt(s int) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Value(int64(s))
}

func (v {{ .TypeName }}Value) SetInt8(s int8) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Value(int64(s))
}

func (v {{ .TypeName }}Value) SetInt16(s int16) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Value(int64(s))
}

func (v {{ .TypeName }}Value) SetInt32(s int32) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Value(int64(s))
}

func (v {{ .TypeName }}Value) Set{{ .TypeName }}(s int64) {
	v.Set(s)
}

func (v {{ .TypeName }}Value) SetIntPtr(s *int) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}PointerValue(int64(s))
}

func (v {{ .TypeName }}Value) SetInt8Ptr(s *int8) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}PointerValue(int64(s))
}

func (v {{ .TypeName }}Value) SetInt16Ptr(s *int16) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}PointerValue(int64(s))
}

func (v {{ .TypeName }}Value) SetInt32Ptr(s *int32) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}PointerValue(int64(s))
}

func (v {{ .TypeName }}Value) Set{{ .TypeName }}Ptr(s *int64) {
	v.SetPtr(s)
}


func (v {{ .TypeName }}Value) GetInt() int {
	return int(v.Get())
}

func (v {{ .TypeName }}Value) GetInt8() int8 {
	return int8(v.Get())
}

func (v {{ .TypeName }}Value) GetInt16() int16 {
	return int16(v.Get())
}

func (v {{ .TypeName }}Value) GetInt32() int32 {
	return int32(v.Get())
}

func (v {{ .TypeName }}Value) GetInt64() int64 {
	return v.Get()
}

func (v {{ .TypeName }}Value) GetIntPtr() *int {
	if v.IsKnown() {
		i := int(v.Get())
		return &i
	}

	return nil
}

func (v {{ .TypeName }}Value) GetInt8Ptr() *int8 {
	if v.IsKnown() {
		i := int8(v.Get())
		return &i
	}

	return nil
}

func (v {{ .TypeName }}Value) GetInt16Ptr() *int16 {
	if v.IsKnown() {
		i := int16(v.Get())
		return &i
	}

	return nil
}

func (v {{ .TypeName }}Value) GetInt32Ptr() *int32 {
	if v.IsKnown() {
		i := int32(v.Get())
		return &i
	}

	return nil
}

func (v {{ .TypeName }}Value) GetInt64Ptr() *int64 {
	if v.IsKnown() {
		i := v.Get()
		return &i
	}

	return nil
}

{{ end }}

func (v *{{ .TypeName }}Value) SetNull() {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Null()
}

func (v *{{ .TypeName }}Value) SetUnknown() {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Unknown()
}

func (v {{ .TypeName }}Value) IsKnown() bool {
	return !v.{{ .TypeName }}Value.IsNull() && !v.{{ .TypeName }}Value.IsUnknown()
}
